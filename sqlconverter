import React, { useState } from 'react';

const SqlConverter = () => {
  const [input, setInput] = useState('');
  const [output, setOutput] = useState('');
  const [loading, setLoading] = useState(false);

  const convertToInsertAsync = () => {
    setLoading(true);
    setOutput('');

    const blocks = input.split(/COMMIT\s*;/i).filter(Boolean); // Split by COMMIT; and remove empty
    const batchSize = 100; // Process 100 blocks per batch to avoid freezing
    const results = [];

    const processBatch = (index) => {
      for (let i = index; i < Math.min(index + batchSize, blocks.length); i++) {
        const block = blocks[i].trim();
        const lines = block.split('\n');

        let tableName = '';
        let columns = [];
        let values = [];

        lines.forEach((line) => {
          if (line.trim().toUpperCase().startsWith('UPDATE')) {
            const parts = line.trim().split(' ');
            tableName = parts[1];
          }

          if (line.includes('SET') || line.trim().toUpperCase().startsWith('WHERE')) return;

          const match = line.match(/(\w+)\s*=\s*'([^']*)'/);
          if (match) {
            columns.push(match[1]);
            values.push(`'${match[2]}'`);
          }

          if (line.includes('SYSDATE')) {
            const col = line.split('=')[0].trim();
            columns.push(col);
            values.push('SYSDATE');
          }
        });

        if (tableName && columns.length > 0) {
          const insert = `INSERT INTO ${tableName} (${columns.join(', ')})\nVALUES (${values.join(', ')});\nCOMMIT;`;
          results.push(insert);
        }
      }

      // Update output after every batch
      setOutput(prev => prev + results.join('\n\n') + '\n\n');
      results.length = 0; // Clear for next batch

      if (index + batchSize < blocks.length) {
        setTimeout(() => processBatch(index + batchSize), 10); // Schedule next batch
      } else {
        setLoading(false);
      }
    };

    // Start processing
    processBatch(0);
  };

  return (
    <div style={{ padding: '20px' }}>
      <h3>SQL Update â†’ Insert Converter (Handles 9000+ Updates)</h3>
      <textarea
        rows={20}
        cols={100}
        placeholder="Paste 9000+ UPDATE statements here (separated by COMMIT;)"
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />
      <br />
      <button onClick={convertToInsertAsync} disabled={loading}>
        {loading ? 'Converting...' : 'Convert to INSERTs'}
      </button>
      <h4>Converted INSERT Statements:</h4>
      <textarea
        rows={25}
        cols={100}
        value={output}
        readOnly
      />
    </div>
  );
};

export default SqlConverter;

import React, { useState } from 'react';

const SqlConverter = () => {
  const [input, setInput] = useState('');
  const [output, setOutput] = useState('');

  const convertSql = () => {
    const blocks = input.split(/COMMIT\s*;?/i).filter(Boolean);
    let result = '';

    blocks.forEach((block) => {
      const lines = block.trim().split('\n');
      let tableName = '';
      let columns = [];
      let values = [];

      lines.forEach((line) => {
        line = line.trim();
        if (!line) return;

        // 1. Extract table name
        if (line.toUpperCase().startsWith('UPDATE')) {
          const parts = line.split(/\s+/);
          tableName = parts[1];
          return;
        }

        // 2. Skip SET keyword
        if (line.toUpperCase() === 'SET') return;

        // 3. Handle WHERE clause
        if (line.toUpperCase().startsWith('WHERE')) {
          const whereMatch = line.match(/WHERE\s+(\w+)\s*=\s*'?([^';]+)'?/i);
          if (whereMatch) {
            columns.push(whereMatch[1]);
            values.push(`'${whereMatch[2]}'`);
          }
          return;
        }

        // 4. Handle key = value pairs
        const match = line.match(/^(\w+)\s*=\s*('?[^']*'?)\s*,?$/);
        if (match) {
          const key = match[1];
          let val = match[2].trim();

          if (val.toUpperCase() === 'SYSDATE') {
            values.push('SYSDATE');
          } else if (!val.startsWith("'")) {
            val = `'${val}'`;
            values.push(val);
          } else {
            values.push(val);
          }
          columns.push(key);
        }
      });

      // 5. Only if everything is captured
      if (tableName && columns.length > 0 && values.length > 0) {
        result += `INSERT INTO ${tableName} (${columns.join(', ')})\nVALUES (${values.join(', ')});\nCOMMIT;\n\n`;
      }
    });

    setOutput(result.trim());
  };

  return (
    <div style={{ padding: '20px' }}>
      <h3>SQL Update to Insert Converter</h3>
      <textarea
        rows={20}
        cols={100}
        placeholder="Paste UPDATE blocks ending with COMMIT;"
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />
      <br />
      <button onClick={convertSql}>Convert to INSERTs</button>
      <h4>Converted INSERT Statements:</h4>
      <textarea
        rows={25}
        cols={100}
        value={output}
        readOnly
      />
    </div>
  );
};

export default SqlConverter;
import React, { useState } from 'react';

const SqlUpdateToInsertConverter = () => {
  const [input, setInput] = useState('');
  const [output, setOutput] = useState('');
  const [loading, setLoading] = useState(false);

  const convertSql = () => {
    setLoading(true);
    setOutput('');

    const blocks = input.split(/COMMIT\s*;?/i).filter(Boolean);
    let finalOutput = '';

    for (let block of blocks) {
      const lines = block.trim().split('\n');
      let tableName = '';
      let columns = [];
      let values = [];
      let mode = '';

      for (let line of lines) {
        line = line.trim();
        if (!line) continue;

        if (line.toUpperCase().startsWith('UPDATE')) {
          const parts = line.split(/\s+/);
          const updateIndex = parts.findIndex(p => p.toUpperCase() === 'UPDATE');
          tableName = parts[updateIndex + 1];
          mode = 'SET';

          const setMatch = line.match(/SET\s+(.*)/i);
          if (setMatch && setMatch[1]) {
            line = setMatch[1];
          } else {
            continue;
          }
        }

        if (line.toUpperCase() === 'SET') {
          mode = 'SET';
          continue;
        }

        if (line.toUpperCase().startsWith('WHERE')) {
          mode = 'WHERE';
          line = line.replace(/^WHERE/i, '').trim();
        }

        const match = line.match(/^(\w+)\s*=\s*(.+?)[,;]?$/);
        if (!match) continue;

        const key = match[1];
        let val = match[2].trim();

        if (val.toUpperCase() === 'SYSDATE') {
          columns.push(key);
          values.push('SYSDATE');
        } else if (val.startsWith("'") && val.endsWith("'")) {
          columns.push(key);
          values.push(val);
        } else {
          columns.push(key);
          values.push(`'${val.replace(/[';]/g, '')}'`);
        }
      }

      if (tableName && columns.length > 0) {
        const insert = `INSERT INTO ${tableName} (${columns.join(', ')})\nVALUES (${values.join(', ')});\nCOMMIT;`;
        finalOutput += insert + '\n\n';
      }
    }

    setOutput(finalOutput.trim());
    setLoading(false);
  };

  return (
    <div style={{ padding: '20px' }}>
      <h3>Reliable SQL UPDATE to INSERT Converter</h3>
      <textarea
        rows={20}
        cols={100}
        placeholder="Paste SQL UPDATE blocks separated by COMMIT;"
        value={input}
        onChange={(e) => setInput(e.target.value)}
      />
      <br />
      <button onClick={convertSql} disabled={loading}>
        {loading ? 'Converting...' : 'Convert to INSERTs'}
      </button>
      <h4>Converted INSERT Statements:</h4>
      <textarea
        rows={25}
        cols={100}
        value={output}
        readOnly
      />
    </div>
  );
};

export default SqlUpdateToInsertConverter;
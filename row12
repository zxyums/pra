import React from 'react';
import { AgGridReact } from 'ag-grid-react';
import {
  ColDef,
  GridReadyEvent,
  IDetailCellRendererParams,
} from 'ag-grid-community';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import 'ag-grid-enterprise';

// ---------------- Types ----------------
interface SubAccount {
  accountId: string;
  type: string;
  status: string;
}

interface FluData {
  symptom: string;
  severity: string;
  lastUpdated: string;
}

interface LegalEntity {
  coverageCountry: string;
  systemName: string;
  businessName: string;
  jurisdiction: string;
  processingCountry: string;
  settlementCountry: string;
  subAccounts: SubAccount[];
  fluData: FluData[];
}

interface Language {
  latin: string;
  nonLatin: string;
  level1: string;
  level2: string;
  level3: string;
}

interface Attestation {
  attestationId: string;
  status: string;
  createdBy: string;
  country: string;
  watchlist: string;
  isScanned: string;
  legalEntities: LegalEntity[];
  languages: Language[];
}

// ---------------- Columns ----------------
const parentColumns: ColDef[] = [
  {
    headerName: '',
    field: 'attestationId',
    cellRenderer: 'agGroupCellRenderer',
  },
  {
    headerName: 'Actions',
    cellRenderer: () => 'Edit | History',
    width: 120,
  },
  { field: 'attestationId', headerName: 'Attestation ID' },
  { field: 'status', headerName: 'Status' },
  { field: 'createdBy', headerName: 'Created By' },
  { field: 'country', headerName: 'Country' },
  { field: 'watchlist', headerName: 'Watchlist' },
  { field: 'isScanned', headerName: 'Is Scanned' },
];

const fluDataColumns: ColDef[] = [
  { field: 'symptom', headerName: 'Symptom' },
  { field: 'severity', headerName: 'Severity' },
  { field: 'lastUpdated', headerName: 'Last Updated' },
];

const legalEntityColumns: ColDef[] = [
  {
    headerName: '',
    field: 'coverageCountry',
    cellRenderer: 'agGroupCellRenderer',
  },
  { field: 'systemName', headerName: 'System Name' },
  { field: 'businessName', headerName: 'Business Name' },
  { field: 'jurisdiction', headerName: 'Jurisdiction' },
  { field: 'processingCountry', headerName: 'Processing Country' },
  { field: 'settlementCountry', headerName: 'Settlement Country' },
];

const languageColumns: ColDef[] = [
  { field: 'latin', headerName: 'Latin Languages' },
  { field: 'nonLatin', headerName: 'Non-Latin Languages' },
  { field: 'level1', headerName: 'Family Level 1' },
  { field: 'level2', headerName: 'Family Level 2' },
  { field: 'level3', headerName: 'Family Level 3' },
];

// ---------------- Sample Data ----------------
const rowData: Attestation[] = [
  {
    attestationId: 'ATT123',
    status: 'Active',
    createdBy: 'Ramya',
    country: 'India',
    watchlist: 'Sanctions',
    isScanned: 'Yes',
    legalEntities: [
      {
        coverageCountry: 'US',
        systemName: 'System A',
        businessName: 'XYZ Corp',
        jurisdiction: 'US',
        processingCountry: 'US',
        settlementCountry: 'US',
        subAccounts: [],
        fluData: [
          { symptom: 'Fever', severity: 'Mild', lastUpdated: '2024-04-01' },
          { symptom: 'Cough', severity: 'Moderate', lastUpdated: '2024-04-03' },
        ],
      },
    ],
    languages: [
      {
        latin: 'English',
        nonLatin: 'None',
        level1: 'Retail',
        level2: 'Consumer',
        level3: 'Luxury',
      },
    ],
  },
];

// ---------------- Nested Renderers ----------------
const LegalEntityDetailRenderer: React.FC<IDetailCellRendererParams<LegalEntity>> = ({ data }) => {
  return (
    <div className="ag-theme-alpine" style={{ height: 150 }}>
      <AgGridReact<FluData>
        rowData={data?.fluData}
        columnDefs={fluDataColumns}
        defaultColDef={{ flex: 1, resizable: true }}
      />
    </div>
  );
};

const LegalEntityGrid: React.FC<{ data: LegalEntity[] }> = ({ data }) => {
  return (
    <div className="ag-theme-alpine" style={{ height: 200 }}>
      <AgGridReact<LegalEntity>
        rowData={data}
        columnDefs={legalEntityColumns}
        masterDetail={true}
        isRowMaster={(row) => !!row?.fluData?.length}
        detailCellRenderer={LegalEntityDetailRenderer}
        detailRowHeight={150}
        defaultColDef={{ flex: 1, resizable: true }}
      />
    </div>
  );
};

const DetailRenderer: React.FC<IDetailCellRendererParams<Attestation>> = ({ data }) => {
  return (
    <div style={{ padding: 10 }}>
      <div style={{ fontWeight: 'bold', fontSize: '14px', marginBottom: 6 }}>
        Legal Entities
      </div>
      <LegalEntityGrid data={data?.legalEntities} />

      <div style={{ fontWeight: 'bold', fontSize: '14px', marginTop: 20, marginBottom: 6 }}>
        Languages and Family
      </div>
      <div className="ag-theme-alpine" style={{ height: 150 }}>
        <AgGridReact<Language>
          rowData={data?.languages}
          columnDefs={languageColumns}
          defaultColDef={{ flex: 1, resizable: true }}
        />
      </div>
    </div>
  );
};

// ---------------- Main Grid ----------------
const GridExample2: React.FC = () => {
  const gridRef = React.useRef<AgGridReact<Attestation>>(null);

  const onGridReady = (params: GridReadyEvent) => {
    params.api.sizeColumnsToFit();
  };

  const expandAll = () => {
    gridRef.current?.api.forEachNode((node) => node.setExpanded(true));
  };

  const collapseAll = () => {
    gridRef.current?.api.forEachNode((node) => node.setExpanded(false));
  };

  return (
    <>
      <div style={{ margin: '10px 0' }}>
        <button onClick={expandAll}>Expand All</button>
        <button onClick={collapseAll} style={{ marginLeft: 10 }}>Collapse All</button>
        <button
          onClick={() => gridRef.current?.api.exportDataAsExcel()}
          style={{ marginLeft: 10 }}
        >
          Export to Excel
        </button>
      </div>

      <div className="ag-theme-alpine" style={{ height: '85vh', width: '100%' }}>
        <AgGridReact<Attestation>
          ref={gridRef}
          rowData={rowData}
          columnDefs={parentColumns}
          rowSelection="multiple"
          masterDetail={true}
          isRowMaster={() => true}
          detailRowHeight={450}
          detailCellRenderer={DetailRenderer}
          onGridReady={onGridReady}
          pagination={true}
          paginationPageSize={10}
          defaultColDef={{
            flex: 1,
            resizable: true,
            filter: true,
            floatingFilter: true,
          }}
        />
      </div>
    </>
  );
};

export default GridExample2;
